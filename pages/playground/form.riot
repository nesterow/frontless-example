<playground-form>
  <playground>
     <form slot="example" class="form-horizontal {state.loading && 'loading'}" onsubmit={ submit }>
      <h2>Form Validation</h2>
      <div class="form-group {state.errors.username && 'has-error'}">
        <input class="form-input" name="username" type="text" placeholder="Name" autocomplete="off">
        <p class="form-input-hint" each={error in state.errors.username}>{error}</p>
      </div>
      <div class="form-group {state.errors.email && 'has-error'}">
        <input class="form-input" name="email" type="email" placeholder="Email" autocomplete="off">
        <p class="form-input-hint" each={error in state.errors.email}>{error}</p>
      </div>
      <div class="form-group {state.errors.password1 && 'has-error'}">
        <input class="form-input" name="password1" type="password" placeholder="Password" autocomplete="off">
        <p class="form-input-hint" each={error in state.errors.password1}>{error}</p>
      </div>
      <div class="form-group {state.errors.password2 && 'has-error'}">
        <input class="form-input" name="password2" type="password" placeholder="Repeat password" autocomplete="off">
        <p class="form-input-hint" each={error in state.errors.password2}>{error}</p>
      </div>
      <div class="form-group {state.errors.agree && 'has-error'}">
          <label class="form-switch">
            <input type="checkbox" name="agree">
            <i class="form-icon"></i> 
            I agree with terms and conditions.
          </label>
          <p class="form-input-hint" each={error in state.errors.agree}>{error}</p>
      </div>
      <div class="form-group">
          <button type="submit" class="btn btn-primary">Register</button>
      </div>
      <div class="form-group has-success" if={state.success} >
        <p class="form-input-hint">Success!</p>
      </div>
    </form>
    <gist slot="code" 
          username="nesterow" 
          gist="5c72149fb60e5c265db7ef8611a1a1a9" files={[
            {file: 'form.riot.html', name: 'RiotJS'},
            {file: 'form.service.js', name: 'FeathersJS'},
            {file: 'readme.md', name: 'Readme'},
          ]}>
      </gist>
  </playground>
  <script>
    
    import Playground from './base.riot'
    import client from 'client'
    import {serializeForm} from 'components/utils'

    export default () => ({
      layout: 'playground',
      id: 'form-validation',
      components: {
        Playground,
      },
      state: {
        errors:{},
        success: false,
      },
      
      errors(field){
        return this.state.errors[field] || []
      },

      submit(ev) {
        ev.preventDefault()
        const payload = serializeForm(ev.target)
        console.log('unceccesary call')
        this.update({loading: true, success: false});
        client.service('form-validation').
          create(payload).
          then(() => {
            this.update({loading: false})
          })
      }
    })
  </script>
  <style>
    .form-input-hint{
      width: 100%;
      margin-bottom: 0px;
    }
  </style>
</playground-form>